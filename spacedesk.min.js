
const WebSocket = require('websocket').w3cwebsocket;
const fs = require('fs');
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var SpacedeskEvent = (function () {
    function SpacedeskEvent() {
        this.handlers = [];
    }
    SpacedeskEvent.prototype.on = function (handler) {
        this.handlers.push(handler);
    };
    SpacedeskEvent.prototype.off = function (handler) {
        this.handlers = this.handlers.filter(function (h) { return h !== handler; });
    };
    SpacedeskEvent.prototype.trigger = function (data) {
        for (var i = 0; i < this.handlers.length; i++) {
            var element = this.handlers[i];
            element(data);
        }
    };
    return SpacedeskEvent;
}());
var spacedesk;
(function (spacedesk) {
    var Model;
    (function (Model) {
        var Resolution = (function () {
            function Resolution(width, height) {
                if (width === void 0) { width = 0; }
                if (height === void 0) { height = 0; }
                this.width = width;
                this.height = height;
            }
            return Resolution;
        }());
        Model.Resolution = Resolution;
    })(Model = spacedesk.Model || (spacedesk.Model = {}));
})(spacedesk || (spacedesk = {}));
var spacedesk;
(function (spacedesk) {
    var Controller;
    (function (Controller) {
        var UI;
        (function (UI) {
            var SettingsController = (function () {
                function SettingsController(option) {
                    this.registerEvents(option);
                }
                SettingsController.loadSettings = function (option) {
                    this.server = option.server;
                    this.resolution = option.resolution;
                    this.connectionTimeout = option.connectionTimeout;
                    this.reconnections = option.reconnections;
                    this.reconnectionTimeout = option.reconnectionTimeout;
                };
                SettingsController.prototype.registerEvents = function (option) {
                    var _this = this;
                    SettingsController.loadSettings(option);
                };
                return SettingsController;
            }());
            UI.SettingsController = SettingsController;
        })(UI = Controller.UI || (Controller.UI = {}));
    })(Controller = spacedesk.Controller || (spacedesk.Controller = {}));
})(spacedesk || (spacedesk = {}));
var spacedesk;
(function (spacedesk) {
    var Model;
    (function (Model) {
        var Options = (function () {
            function Options() {
                this.server = "127.0.0.1";
                this.port = 28252;
                this.resolution = new spacedesk.Model.Resolution(1920,1080);
                this.connectionTimeout = 20000;
                this.reconnections = 5;
                this.reconnectionTimeout = 60000;
            }
            Object.defineProperty(Options, "currentOptions", {
                get: function () {
                    if (this.instance == null) {
                        this.loadCurrentOptions();
                    }
                    return this.instance;
                },
                enumerable: true,
                configurable: true
            });
            Options.loadCurrentOptions = function () {
                var settings = new Options();
                try {
                    if (fs.existsSync('settings.json')) {
                        this.parseJSON(settings, JSON.parse(fs.readFileSync('settings.json')));
                    } else {
                        fs.writeFileSync('settings.json', JSON.stringify(settings, null, 2));
                    }
                }
                catch (error) {
                    spacedesk.Debug.error(error);
                }
                this.instance = settings;
            };
            Options.parseJSON = function (settings, json) {
                for (var key in json) {
                    if (json.hasOwnProperty(key)) {
                        var element = json[key];
                        if (settings[key] != null) {
                            settings[key] = element;
                        }
                    }
                }
            };
            Options.prototype.updateScreenResolution = function () {
                this.resolution = Model.Resolution.GetScreenResolution();
            };
            Options.prototype.getSocketUrl = function () {
                return "ws://" + this.server + ":" + this.port;
            };
            Options.prototype.clearOptions = function () {
                try {
                    localStorage.clear();
                }
                catch (error) {
                    spacedesk.Debug.error(error);
                }
                Options.instance = null;
            };
            return Options;
        }());
        Model.Options = Options;
    })(Model = spacedesk.Model || (spacedesk.Model = {}));
})(spacedesk || (spacedesk = {}));
var spacedesk;
(function (spacedesk) {
    var Model;
    (function (Model) {
        var Protocol;
        (function (Protocol) {
            var ProtocolDefinition = (function () {
                function ProtocolDefinition() {
                }
                ProtocolDefinition.versionNumberMajor = 4;
                ProtocolDefinition.versionNumberMinor = 8;
                ProtocolDefinition.headerLength = 128;
                ProtocolDefinition.payloadLength = 334;
                ProtocolDefinition.packetLength = ProtocolDefinition.headerLength + ProtocolDefinition.payloadLength;
                ProtocolDefinition.headerKVMLength = 28;
                return ProtocolDefinition;
            }());
            Protocol.ProtocolDefinition = ProtocolDefinition;
            (function (ProtocolHeaderType) {
                ProtocolHeaderType[ProtocolHeaderType["Identification"] = 0] = "Identification";
                ProtocolHeaderType[ProtocolHeaderType["Ping"] = 1] = "Ping";
                ProtocolHeaderType[ProtocolHeaderType["PowerSuspendHibernate"] = 6] = "PowerSuspendHibernate";
                ProtocolHeaderType[ProtocolHeaderType["FlowControlAck"] = 7] = "FlowControlAck";
                ProtocolHeaderType[ProtocolHeaderType["Disconnect"] = 8] = "Disconnect";
                ProtocolHeaderType[ProtocolHeaderType["Rotation"] = 9] = "Rotation"
                ProtocolHeaderType[ProtocolHeaderType["Max"] = 13] = "Max";
            })(Protocol.ProtocolHeaderType || (Protocol.ProtocolHeaderType = {}));
            var ProtocolHeaderType = Protocol.ProtocolHeaderType;
            (function (ProtocolClientType) {
                ProtocolClientType[ProtocolClientType["WindowsRemoteMonitor"] = 0] = "WindowsRemoteMonitor";
                ProtocolClientType[ProtocolClientType["WebBrowser"] = 1] = "WebBrowser";
                ProtocolClientType[ProtocolClientType["UsbCableApple"] = 2] = "UsbCableApple";
                ProtocolClientType[ProtocolClientType["KvmWindows"] = 3] = "KvmWindows";
                ProtocolClientType[ProtocolClientType["Max"] = 4] = "Max";
            })(Protocol.ProtocolClientType || (Protocol.ProtocolClientType = {}));
            var ProtocolClientType = Protocol.ProtocolClientType;
            (function (ProtocolColorType) {
                ProtocolColorType[ProtocolColorType["RGB8"] = 0] = "RGB8";
                ProtocolColorType[ProtocolColorType["RGB16"] = 1] = "RGB16";
                ProtocolColorType[ProtocolColorType["RGB24"] = 2] = "RGB24";
                ProtocolColorType[ProtocolColorType["RGBX32"] = 3] = "RGBX32";
                ProtocolColorType[ProtocolColorType["RGBA32"] = 4] = "RGBA32";
                ProtocolColorType[ProtocolColorType["YUV444"] = 5] = "YUV444";
                ProtocolColorType[ProtocolColorType["YUV422"] = 6] = "YUV422";
                ProtocolColorType[ProtocolColorType["YUV420"] = 7] = "YUV420";
                ProtocolColorType[ProtocolColorType["Max"] = 8] = "Max";
            })(Protocol.ProtocolColorType || (Protocol.ProtocolColorType = {}));
            var ProtocolColorType = Protocol.ProtocolColorType;
            (function (CompressionType) {
                CompressionType[CompressionType["Off"] = 0] = "Off";
                CompressionType[CompressionType["H264"] = 1] = "H264";
                CompressionType[CompressionType["Unused1"] = 2] = "Unused1";
                CompressionType[CompressionType["JPEG"] = 3] = "JPEG";
                CompressionType[CompressionType["MJPEGD2"] = 4] = "MJPEGD2";
            })(Protocol.CompressionType || (Protocol.CompressionType = {}));
        })(Protocol = Model.Protocol || (Model.Protocol = {}));
    })(Model = spacedesk.Model || (spacedesk.Model = {}));
})(spacedesk || (spacedesk = {}));
var spacedesk;
(function (spacedesk) {
    var Model;
    (function (Model) {
        var Protocol;
        (function (Protocol) {
            var Packet;
            (function (Packet) {
                var Header;
                (function (Header) {
                    var GenericHeader = (function () {
                        function GenericHeader(buffer) {
                            this.countByteDataFollowingHeader = Protocol.ProtocolDefinition.payloadLength;
                            if (buffer != null) {
                                this.identification = buffer.getInteger32Value(0);
                                this.countByteDataFollowingHeader = buffer.getInteger32Value(4);
                                this.LoadFromBuffer(buffer);
                            }
                        }
                        return GenericHeader;
                    }());
                    Header.GenericHeader = GenericHeader;
                })(Header = Packet.Header || (Packet.Header = {}));
            })(Packet = Protocol.Packet || (Protocol.Packet = {}));
        })(Protocol = Model.Protocol || (Model.Protocol = {}));
    })(Model = spacedesk.Model || (spacedesk.Model = {}));
})(spacedesk || (spacedesk = {}));
var spacedesk;
(function (spacedesk) {
    var Model;
    (function (Model) {
        var Rect = (function () {
            function Rect(posX, posY, posX2, posY2) {
                if (posX === void 0) { posX = 0; }
                if (posY === void 0) { posY = 0; }
                if (posX2 === void 0) { posX2 = 0; }
                if (posY2 === void 0) { posY2 = 0; }
                this.width = this.posX2 - this.posX;
                this.height = this.posY2 - this.posY;
                this.posX = posX;
                this.posY = posY;
                this.posX2 = posX2;
                this.posY2 = posY2;
            }
            return Rect;
        }());
        Model.Rect = Rect;
    })(Model = spacedesk.Model || (spacedesk.Model = {}));
})(spacedesk || (spacedesk = {}));
Uint8Array.prototype.getInteger32Value = function (index) {
    return this[index] | (this[index + 1] << 8) | (this[index + 2] << 16) | (this[index + 3] << 24);
};
Uint8Array.prototype.assignInteger32 = function (index, value) {
    this[index] = value & 0xFF;
    this[index + 1] = (value & 0xFF00) >> 8;
    this[index + 2] = (value & 0xFF0000) >> 16;
    this[index + 3] = (value & 0xFF000000) >> 24;
};
Uint8Array.prototype.assignInteger16 = function (index, value) {
    this[index] = value & 0xFF;
    this[index + 1] = (value & 0xFF00) >> 8;
};
var spacedesk;
(function (spacedesk) {
    var Model;
    (function (Model) {
        var Protocol;
        (function (Protocol) {
            var Packet;
            (function (Packet) {
                var Payloads;
                (function (Payloads) {
                    var GenericPayload = (function () {
                        function GenericPayload(buffer) {
                            if (buffer != null) {
                                this.data = buffer;
                            }
                        }
                        return GenericPayload;
                    }());
                    Payloads.GenericPayload = GenericPayload;
                })(Payloads = Packet.Payloads || (Packet.Payloads = {}));
            })(Packet = Protocol.Packet || (Protocol.Packet = {}));
        })(Protocol = Model.Protocol || (Model.Protocol = {}));
    })(Model = spacedesk.Model || (spacedesk.Model = {}));
})(spacedesk || (spacedesk = {}));
var spacedesk;
(function (spacedesk) {
    var Model;
    (function (Model) {
        var Protocol;
        (function (Protocol) {
            var Packet;
            (function (Packet) {
                var Payloads;
                (function (Payloads) {
                    var PayloadFactory = (function () {
                        function PayloadFactory() {
                        }
                        PayloadFactory.GetPayload = function (buffer) {
                            return new Payloads.GenericPayload(new Uint8Array(buffer, Protocol.ProtocolDefinition.headerLength));
                        };
                        return PayloadFactory;
                    }());
                    Payloads.PayloadFactory = PayloadFactory;
                })(Payloads = Packet.Payloads || (Packet.Payloads = {}));
            })(Packet = Protocol.Packet || (Protocol.Packet = {}));
        })(Protocol = Model.Protocol || (Model.Protocol = {}));
    })(Model = spacedesk.Model || (spacedesk.Model = {}));
})(spacedesk || (spacedesk = {}));
var spacedesk;
(function (spacedesk) {
    var Model;
    (function (Model) {
        var Protocol;
        (function (Protocol) {
            var Packet;
            (function (Packet) {
                var Header;
                (function (Header) {
                    var IdentificationHeader = (function (_super) {
                        __extends(IdentificationHeader, _super);
                        function IdentificationHeader(settings, protocolType) {
                            _super.call(this);
                            this.clientType = Protocol.ProtocolClientType.WebBrowser;
                            this.colorType = Protocol.ProtocolColorType.RGB8;
                            this.resolution = null;
                            if (protocolType != null) {
                                this.clientType = protocolType;
                            }
                            this.identification = Protocol.ProtocolHeaderType.Identification;
                            this.resolution = settings.resolution;
                        }
                        IdentificationHeader.prototype.GetBytes = function () {
                            var header = new Uint8Array(Protocol.ProtocolDefinition.headerLength);
                            header.assignInteger32(0, this.identification);
                            header.assignInteger32(4, this.countByteDataFollowingHeader);
                            header.assignInteger32(8, Protocol.ProtocolDefinition.versionNumberMajor);
                            header.assignInteger32(12, Protocol.ProtocolDefinition.versionNumberMinor);
                            header.assignInteger32(16, this.clientType);
                            header.assignInteger32(20, 0);
                            header.assignInteger32(24, 3);
                            header.assignInteger32(24, 4);
                            header.assignInteger32(32, 1);
                            header.assignInteger16(44, 0);
                            header.assignInteger16(46, 0);
                            header.assignInteger32(52, this.resolution.width);
                            header.assignInteger32(88, this.resolution.height);
                            header.assignInteger32(48, 1);
                            header.assignInteger32(56, 0);
                            header.assignInteger32(92, 0);
                            header.assignInteger32(60, 0);
                            header.assignInteger32(64, 0);
                            header.assignInteger32(68, 0);
                            header.assignInteger32(72, 0);
                            header.assignInteger32(76, 0);
                            header.assignInteger32(80, 0);
                            header.assignInteger32(84, 0);
                            header.assignInteger32(96, 0);
                            header.assignInteger32(100, 0);
                            header.assignInteger32(104, 0);
                            header.assignInteger32(108, 0);
                            header.assignInteger32(112, 0);
                            header.assignInteger32(116, 0);
                            header.assignInteger32(120, 0);
                            header.assignInteger32(124, 0);
                            return header;
                        };
                        IdentificationHeader.prototype.LoadFromBuffer = function (buffer) {
                            return;
                        };
                        return IdentificationHeader;
                    }(Header.GenericHeader));
                    Header.IdentificationHeader = IdentificationHeader;
                })(Header = Packet.Header || (Packet.Header = {}));
            })(Packet = Protocol.Packet || (Protocol.Packet = {}));
        })(Protocol = Model.Protocol || (Model.Protocol = {}));
    })(Model = spacedesk.Model || (spacedesk.Model = {}));
})(spacedesk || (spacedesk = {}));
var spacedesk;
(function (spacedesk) {
    var Model;
    (function (Model) {
        var Protocol;
        (function (Protocol) {
            var Packet;
            (function (Packet) {
                var Payloads;
                (function (Payloads) {
                    var IdentificationPayload = (function (_super) {
                        __extends(IdentificationPayload, _super);
                        function IdentificationPayload() {
                            _super.call(this);
                            var payload = new Uint8Array(Protocol.ProtocolDefinition.payloadLength);
                            payload[0] = 0x31;
                            payload[1] = 0;
                            payload[2] = 0x31;
                            payload[3] = 0;
                            payload[4] = 0x31;
                            payload[5] = 0;
                            payload[6] = 0x31;
                            payload[7] = 0;
                            payload[8] = 0x31;
                            payload[9] = 0;
                            payload[10] = 0x32;
                            payload[11] = 0;
                            payload[12] = 0x32;
                            payload[13] = 0;
                            payload[14] = 0x32;
                            payload[15] = 0;
                            payload[16] = 0x32;
                            payload[17] = 0;
                            payload[18] = 0x32;
                            payload[19] = 0;
                            var counter = 78;
                            var name = "Headless View";
                            for (var i = 0; i < name.length; i++) {
                                payload[counter] = name.charCodeAt(i);
                                counter = counter + 2;
                            }
                            this.data = payload;
                        }
                        return IdentificationPayload;
                    }(Payloads.GenericPayload));
                    Payloads.IdentificationPayload = IdentificationPayload;
                })(Payloads = Packet.Payloads || (Packet.Payloads = {}));
            })(Packet = Protocol.Packet || (Protocol.Packet = {}));
        })(Protocol = Model.Protocol || (Model.Protocol = {}));
    })(Model = spacedesk.Model || (spacedesk.Model = {}));
})(spacedesk || (spacedesk = {}));
var spacedesk;
(function (spacedesk) {
    var Model;
    (function (Model) {
        var Protocol;
        (function (Protocol) {
            var Packet;
            (function (Packet) {
                var SpacedeskPacket = (function () {
                    function SpacedeskPacket(buffer) {
                        return
                    }
                    return SpacedeskPacket;
                }());
                Packet.SpacedeskPacket = SpacedeskPacket;
            })(Packet = Protocol.Packet || (Protocol.Packet = {}));
        })(Protocol = Model.Protocol || (Model.Protocol = {}));
    })(Model = spacedesk.Model || (spacedesk.Model = {}));
})(spacedesk || (spacedesk = {}));
var spacedesk;
(function (spacedesk) {
    var Model;
    (function (Model) {
        var Protocol;
        (function (Protocol) {
            var Packet;
            (function (Packet) {
                var GenericRequestPacket = (function (_super) {
                    __extends(GenericRequestPacket, _super);
                    function GenericRequestPacket() {
                        _super.apply(this, arguments);
                    }
                    GenericRequestPacket.prototype.GetBufferData = function () {
                        var data = new Uint8Array(Protocol.ProtocolDefinition.packetLength);
                        data.set(this.header.GetBytes());
                        data.set(this.payload.data, Protocol.ProtocolDefinition.headerLength);
                        return data;
                    };
                    GenericRequestPacket.prototype.dispose = function () {
                        this.header = null;
                        this.payload = null;
                    };
                    return GenericRequestPacket;
                }(Packet.SpacedeskPacket));
                Packet.GenericRequestPacket = GenericRequestPacket;
            })(Packet = Protocol.Packet || (Protocol.Packet = {}));
        })(Protocol = Model.Protocol || (Model.Protocol = {}));
    })(Model = spacedesk.Model || (spacedesk.Model = {}));
})(spacedesk || (spacedesk = {}));
var spacedesk;
(function (spacedesk) {
    var Model;
    (function (Model) {
        var Protocol;
        (function (Protocol) {
            var Packet;
            (function (Packet) {
                var IdentificationPacket = (function (_super) {
                    __extends(IdentificationPacket, _super);
                    function IdentificationPacket(settings, protocolType) {
                        _super.call(this);
                        this.header = new Packet.Header.IdentificationHeader(settings, protocolType);
                        this.payload = new Packet.Payloads.IdentificationPayload();
                    }
                    return IdentificationPacket;
                }(Packet.GenericRequestPacket));
                Packet.IdentificationPacket = IdentificationPacket;
            })(Packet = Protocol.Packet || (Protocol.Packet = {}));
        })(Protocol = Model.Protocol || (Model.Protocol = {}));
    })(Model = spacedesk.Model || (spacedesk.Model = {}));
})(spacedesk || (spacedesk = {}));
var spacedesk;
(function (spacedesk) {
    var Debug = (function () {
        function Debug() {
        }
        Debug.time = function (name) {
            if (Debug.diagnostic && Debug.consoleTime) {
                Debug.log(name);
                console.log(message);
            }
        };
        Debug.timeEnd = function (name) {
            if (Debug.diagnostic && Debug.consoleTime) {
                Debug.log(name);
                console.log(message);
            }
        };
        Debug.log = function (message) {
        };
        Debug.info = function (message) {
            if (Debug.diagnostic) {
                Debug.log(message);
                console.log(message);
            }
        };
        Debug.warn = function (message) {
            if (Debug.diagnostic) {
                Debug.log(message);
                console.log(message);
            }
        };
        Debug.error = function (message) {
            if (Debug.diagnostic) {
                Debug.log(message);
                console.log(message);
            }
        };
        Debug.diagnostic = false;
        Debug.consoleTime = false;
        return Debug;
    }());
    spacedesk.Debug = Debug;
})(spacedesk || (spacedesk = {}));
var spacedesk;
(function (spacedesk) {
    var Model;
    (function (Model) {
        var Protocol;
        (function (Protocol) {
            var Packet;
            (function (Packet) {
                var FlowControlAckPacket = (function (_super) {
                    __extends(FlowControlAckPacket, _super);
                    function FlowControlAckPacket() {
                        _super.apply(this, arguments);
                    }
                    FlowControlAckPacket.prototype.GetBufferData = function () {
                        var POSITION_TYPE = 0;
                        var POSITION_COUNT_BYTE_DATA_FOLLOWING_HEADER = 4;
                        this.data = new Uint8Array(Protocol.ProtocolDefinition.headerLength);
                        this.data.assignInteger32(POSITION_TYPE, Protocol.ProtocolHeaderType.FlowControlAck);
                        this.data.assignInteger32(POSITION_COUNT_BYTE_DATA_FOLLOWING_HEADER, 0);
                        return this.data;
                    };
                    return FlowControlAckPacket;
                }(Packet.SpacedeskPacket));
                Packet.FlowControlAckPacket = FlowControlAckPacket;
            })(Packet = Protocol.Packet || (Protocol.Packet = {}));
        })(Protocol = Model.Protocol || (Model.Protocol = {}));
    })(Model = spacedesk.Model || (spacedesk.Model = {}));
})(spacedesk || (spacedesk = {}));
var spacedesk;
(function (spacedesk) {
    var Controller;
    (function (Controller) {
        var SpacedeskController = (function () {
            function SpacedeskController() {
                this.initialPayloadTimeout = false;
                this.initialPayloadTimeoutTime = 5000;
                this.onConnectedTriggered = false;
                this.connectionTimeout = false;
                this.reconnecting = false;
                this.reconnections = 0;
                this.shouldReconnectToServer = true;
                this.connected = false;
                this.naturalClosed = false;
                this.screenVisible = false;
                this.onConnected = new SpacedeskEvent();
                this.onDisconnected = new SpacedeskEvent();
                this.onReconnect = new SpacedeskEvent();
                this.onConnectionTimout = new SpacedeskEvent();
                this.onConnectionError = new SpacedeskEvent();
            }
            Object.defineProperty(SpacedeskController.prototype, "Connected", {
                get: function () {
                    return this.websocket != null && this.websocket.readyState === WebSocket.OPEN;
                },
                enumerable: true,
                configurable: true
            });
            SpacedeskController.prototype.connectToServer = function (settings) {
                var _this = this;
                this.options = settings;
                if (settings == null || settings.server == null) {
                    spacedesk.Debug.error("settings model is null oder settings.server is null");
                    return;
                }
                try {
                    var url = this.options.getSocketUrl();
                    this.onConnectedTriggered = false;
                    this.websocket = new WebSocket(url);
                    this.websocket.binaryType = "arraybuffer";
                    this.websocket.onopen = function () { return _this.onSocketOpened(); };
                    this.websocket.onerror = function (event) { return _this.onSocketError(event); };
                    this.websocket.onclose = function (event) { return _this.onSocketClose(event); };
                    this.websocket.onmessage = function (message) { return _this.onSocketMessageReceived(message); };
                    var time = (this.reconnecting ? this.options.reconnectionTimeout : this.options.connectionTimeout);
                    this.timerTimeoutHandle = setTimeout(function () {
                        spacedesk.Debug.warn("Connection timeout.");
                        _this.connectionTimeout = true;
                        if (_this.websocket != null) {
                            _this.websocket.close();
                        }
                        _this.connectionTimeout = false;
                        _this.onConnectionTimout.trigger();
                    }, time);
                }
                catch (e) {
                    console.log(e)
                    this.onConnectionError.trigger(this.getErrorCode(1));
                    spacedesk.Debug.log(e);
                }
            };
            SpacedeskController.prototype.closeConnection = function (message) {
                this.naturalClosed = true;
                if (this.websocket) {
                    if (this.websocket.readyState === WebSocket.OPEN) {
                        if (message != null && message.length > 0) {
                            this.sendData(message);
                        }
                        this.websocket.close(1000);
                    }
                    else {
                        clearTimeout(this.timerTimeoutHandle);
                        this.shouldReconnectToServer = false;
                    }
                }
            };
            SpacedeskController.prototype.sendData = function (buffer) {
                if (this.Connected) {
                    this.websocket.send(buffer);
                }
            };
            SpacedeskController.prototype.onSocketOpened = function () {
                clearTimeout(this.timerTimeoutHandle);
                this.reconnecting = false;
                this.shouldReconnectToServer = true;
                this.reconnections = 0;
                this.connected = true;
                if (!this.onConnectedTriggered) {
                    this.onConnectedTriggered = true;
                    this.onConnected.trigger();
                }
            };
            SpacedeskController.prototype.onSocketError = function (event) {
                if (event.code == null || event.code === undefined) {
                    event.code = 3;
                }
                else {
                    this.onConnectionError.trigger(this.getErrorCode(event.code));
                }
            };
            SpacedeskController.prototype.onSocketClose = function (event) {
                var serverClosedSession = false;
                clearTimeout(this.timerTimeoutHandle);
                this.websocket = null;
                if (this.initialPayloadTimeout) {
                    return;
                }
                if (this.connectionTimeout) {
                    return;
                }
                if (event.code !== 1000) {
                    var reason = this.getErrorCode(event.code, event);
                    if (event.code === 1006) {
                        serverClosedSession = true;
                    }
                    else {
                        spacedesk.Debug.warn(reason);
                    }
                }
                if (this.connected && this.shouldReconnectToServer && serverClosedSession && !this.screenVisible) {
                    spacedesk.Debug.info("Reconnect: Server closed the session due a Power State Event.");
                    this.naturalClosed = false;
                }
                this.connected = false;
                if (this.naturalClosed) {
                    this.naturalClosed = false;
                    this.onDisconnected.trigger();
                }
                else {
                    this.reconnecting = true;
                    if (this.reconnections <= this.options.reconnections) {
                        this.reconnections++;
                        this.onReconnect.trigger();
                        spacedesk.Debug.info("Reconnecting to server " + this.reconnections + " of " + this.options.reconnections + "");
                        this.connectToServer(this.options);
                    }
                    else {
                        spacedesk.Debug.warn("Could not reconnect to server. Max. Reconnections (" + this.options.reconnections + ") reached. Show Error.");
                        this.onDisconnected.trigger();
                    }
                }
            };
            SpacedeskController.prototype.onSocketMessageReceived = function (message) {
                spacedesk.Debug.time("socket message");
                if (this.initialPayloadTimeoutId > 0) {
                    clearTimeout(this.initialPayloadTimeoutId);
                    this.initialPayloadTimeoutId = 0;
                }
            };
            SpacedeskController.prototype.getErrorCode = function (code, event) {
                if (event === void 0) { event = null; }
                var reason = "";
                switch (code) {
                    case 1:
                        reason = "Could not create Websocket";
                        break;
                    case 2:
                        reason = "Server is not responding.";
                        break;
                    case 3:
                        reason = "Connection timeout. Maybe a wrong IP-Address?";
                        break;
                    case 1001:
                        reason = "An endpoint is \"going away\", such as a server going down or a browser having navigated away from a page.";
                        break;
                    case 1002:
                        reason = "An endpoint is terminating the connection due to a protocol error";
                        break;
                    case 1003:
                        reason = "An endpoint is terminating the connection because it has received a type of data it cannot accept (e.g., an endpoint that understands only text data MAY send this if it receives a binary message).";
                        break;
                    case 1004:
                        reason = "Reserved. The specific meaning might be defined in the future.";
                        break;
                    case 1005:
                        reason = "No status code was actually present.";
                        break;
                    case 1006:
                        reason = "The connection was closed abnormally, e.g., without sending or receiving a Close control frame";
                        break;
                    case 1007:
                        reason = "An endpoint is terminating the connection because it has received data within a message that was not consistent with the type of the message (e.g., non-UTF-8 [http://tools.ietf.org/html/rfc3629] data within a text message).";
                        break;
                    case 1008:
                        reason = "An endpoint is terminating the connection because it has received a message that \"violates its policy\". This reason is given either if there is no other sutible reason, or if there is a need to hide specific details about the policy.";
                        break;
                    case 1009:
                        reason = "An endpoint is terminating the connection because it has received a message that is too big for it to process.";
                        break;
                    case 1010:
                        reason = "An endpoint (client) is terminating the connection because it has expected the server to negotiate one or more extension, but the server didn't return them in the response message of the WebSocket handshake. <br /> Specifically, the extensions that are needed are: " + event.reason;
                        break;
                    case 1011:
                        reason = "A server is terminating the connection because it encountered an unexpected condition that prevented it from fulfilling the request.";
                        break;
                    case 1015:
                        reason = "The connection was closed due to a failure to perform a TLS handshake (e.g., the server certificate can't be verified).";
                        break;
                    default:
                        reason = "Unknown reason";
                        break;
                }
                return reason;
            };
            Object.defineProperty(SpacedeskController.prototype, "ConnectionEstablished", {
                get: function () { return this.onConnected; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SpacedeskController.prototype, "Reconnect", {
                get: function () { return this.onReconnect; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SpacedeskController.prototype, "ConnectionError", {
                get: function () { return this.onConnectionError; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SpacedeskController.prototype, "Disconnected", {
                get: function () { return this.onDisconnected; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SpacedeskController.prototype, "Timeout", {
                get: function () { return this.onConnectionTimout; },
                enumerable: true,
                configurable: true
            });
            return SpacedeskController;
        }());
        Controller.SpacedeskController = SpacedeskController;
    })(Controller = spacedesk.Controller || (spacedesk.Controller = {}));
})(spacedesk || (spacedesk = {}));
var spacedesk;
(function (spacedesk) {
    var Controller;
    (function (Controller) {
        var DesktopController = (function () {
            function DesktopController() {
                this.fragmentCounter = 0;
                this.isBusy = false;
            }
            return DesktopController;
        }());
        Controller.DesktopController = DesktopController;
    })(Controller = spacedesk.Controller || (spacedesk.Controller = {}));
})(spacedesk || (spacedesk = {}));
var spacedesk;
(function (spacedesk) {
    var Model;
    (function (Model) {
        var Protocol;
        (function (Protocol) {
            var Packet;
            (function (Packet) {
                var Header;
                (function (Header) {
                    var KVM;
                    (function (KVM) {
                        var GenericInputHeader = (function () {
                            function GenericInputHeader() {
                            }
                            return GenericInputHeader;
                        }());
                        KVM.GenericInputHeader = GenericInputHeader;
                    })(KVM = Header.KVM || (Header.KVM = {}));
                })(Header = Packet.Header || (Packet.Header = {}));
            })(Packet = Protocol.Packet || (Protocol.Packet = {}));
        })(Protocol = Model.Protocol || (Model.Protocol = {}));
    })(Model = spacedesk.Model || (spacedesk.Model = {}));
})(spacedesk || (spacedesk = {}));
var spacedesk;
(function (spacedesk) {
    var Model;
    (function (Model) {
        var Protocol;
        (function (Protocol) {
            var Packet;
            (function (Packet) {
                var Header;
                (function (Header) {
                    var KVM;
                    (function (KVM) {
                        var DisconnectHeader = (function (_super) {
                            __extends(DisconnectHeader, _super);
                            function DisconnectHeader() {
                                _super.apply(this, arguments);
                                this.type = Protocol.ProtocolHeaderType.Disconnect;
                            }
                            DisconnectHeader.prototype.GetBytes = function () {
                                var POSITION_TYPE = 0;
                                var header = new Uint8Array(Protocol.ProtocolDefinition.headerKVMLength);
                                header.assignInteger32(POSITION_TYPE, this.type);
                                return header;
                            };
                            return DisconnectHeader;
                        }(KVM.GenericInputHeader));
                        KVM.DisconnectHeader = DisconnectHeader;
                    })(KVM = Header.KVM || (Header.KVM = {}));
                })(Header = Packet.Header || (Packet.Header = {}));
            })(Packet = Protocol.Packet || (Protocol.Packet = {}));
        })(Protocol = Model.Protocol || (Model.Protocol = {}));
    })(Model = spacedesk.Model || (spacedesk.Model = {}));
})(spacedesk || (spacedesk = {}));
var spacedesk;
(function (spacedesk) {
    var Model;
    (function (Model) {
        (function (ConnectionState) {
            ConnectionState[ConnectionState["NotConnected"] = 0] = "NotConnected";
            ConnectionState[ConnectionState["Connecting"] = 1] = "Connecting";
            ConnectionState[ConnectionState["Connected"] = 2] = "Connected";
            ConnectionState[ConnectionState["Reconnecting"] = 3] = "Reconnecting";
            ConnectionState[ConnectionState["Error"] = 4] = "Error";
        })(Model.ConnectionState || (Model.ConnectionState = {}));
        var ConnectionState = Model.ConnectionState;
    })(Model = spacedesk.Model || (spacedesk.Model = {}));
})(spacedesk || (spacedesk = {}));
var spacedesk;
(function (spacedesk) {
    var Controller;
    (function (Controller) {
        var ConnectionController = (function () {
            function ConnectionController() {
                this.spacedeskController = new Controller.SpacedeskController();
                this.state = spacedesk.Model.ConnectionState.NotConnected;
                this.lastErrorCode = "";
                this.onStateChanged = new SpacedeskEvent();
            }
            Object.defineProperty(ConnectionController.prototype, "connectionState", {
                get: function () {
                    return this.state;
                },
                set: function (newState) {
                    this.state = newState;
                    this.onStateChanged.trigger(this.state);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ConnectionController.prototype, "errorCode", {
                get: function () {
                    return this.lastErrorCode;
                },
                enumerable: true,
                configurable: true
            });
            ConnectionController.prototype.disconnect = function () {
                this.spacedeskController.closeConnection();
            };
            ConnectionController.prototype.connectToServer = function (server) {
                spacedesk.Model.Options.currentOptions.server = server;
                return this.connect(spacedesk.Model.Options.currentOptions);
            };
            ConnectionController.prototype.connect = function (options) {
                if (this.state === spacedesk.Model.ConnectionState.NotConnected) {
                    this.connectionState = spacedesk.Model.ConnectionState.Connecting;
                    this.spacedeskController.connectToServer(options);
                    return true;
                }
                return false;
            };
            ConnectionController.prototype.init = function () {
                var _this = this;
                this.spacedeskController.Reconnect.on(function () {
                    _this.connectionState = spacedesk.Model.ConnectionState.Reconnecting;
                });
                this.spacedeskController.ConnectionError.on(function (errorCode) {
                    _this.lastErrorCode = errorCode;
                    _this.connectionState = spacedesk.Model.ConnectionState.Error;
                });
                this.spacedeskController.Timeout.on(function () {
                    _this.lastErrorCode = "Connection Timeout. Make sure your Server-IP is correct.";
                    _this.connectionState = spacedesk.Model.ConnectionState.Error;
                });
                this.spacedeskController.Disconnected.on(function () {
                    _this.connectionState = spacedesk.Model.ConnectionState.NotConnected;
                });
                this.spacedeskController.ConnectionEstablished.on(function () {
                    var identification = new spacedesk.Model.Protocol.Packet.IdentificationPacket(spacedesk.Model.Options.currentOptions);
                    var data = identification.GetBufferData();
                    _this.spacedeskController.sendData(data);
                    _this.connectionState = spacedesk.Model.ConnectionState.Connected;
                });
                return true;
            };
            Object.defineProperty(ConnectionController.prototype, "StateChanged", {
                get: function () { return this.onStateChanged; },
                enumerable: true,
                configurable: true
            });
            return ConnectionController;
        }());
        Controller.ConnectionController = ConnectionController;
    })(Controller = spacedesk.Controller || (spacedesk.Controller = {}));
})(spacedesk || (spacedesk = {}));
var spacedesk;
(function (spacedesk) {
    var Controller;
    (function (Controller) {
        var UI;
        (function (UI) {
            var LoaderController = (function () {
                function LoaderController() {
                }
                LoaderController.registerLoader = function () {
                };
                return LoaderController;
            }());
            UI.LoaderController = LoaderController;
        })(UI = Controller.UI || (Controller.UI = {}));
    })(Controller = spacedesk.Controller || (spacedesk.Controller = {}));
})(spacedesk || (spacedesk = {}));
var spacedesk;
(function (spacedesk) {
    var Controller;
    (function (Controller) {
        var AppController = (function () {
            function AppController() {
                this.connection = new Controller.ConnectionController();
                this.shouldReconnectToServer = true;
            }
            AppController.prototype.init = function () {
                var _this = this;
                Controller.UI.LoaderController.registerLoader();
                this.settings = new Controller.UI.SettingsController(spacedesk.Model.Options.currentOptions);
                this.registerEvents();
                if (this.connection.init()) {
                    this.connection.StateChanged.on(function (newState) {
                        switch (newState) {
                            case spacedesk.Model.ConnectionState.NotConnected:
                                _this.onDisconnected();
                                break;
                            case spacedesk.Model.ConnectionState.Connected:
                                _this.onConnected();
                                break;
                            case spacedesk.Model.ConnectionState.Error:
                                console.log('Error')
                                break;
                            default:
                                break;
                        }
                    });
                    if (spacedesk.Model.Options.currentOptions.server != null && spacedesk.Model.Options.currentOptions.server !== "") {
                        this.connect();
                    }
                }
            };
            AppController.prototype.registerEvents = function () {
                var _this = this;
                this.registerModalEvents();
                var app = this;
                process.on('exit', function (e) {
                    app.disconnect();
                });
            };
            AppController.prototype.registerModalEvents = function () {
            };
            AppController.prototype.connectUsingInput = function () {
                spacedesk.Model.Options.currentOptions.server = server;
                this.connect();
            };
            AppController.prototype.connect = function () {
                var _this = this;
                if (this.connection.connectionState === spacedesk.Model.ConnectionState.NotConnected) {
                    console.log(`Connecting to ${spacedesk.Model.Options.currentOptions.server}:${spacedesk.Model.Options.currentOptions.port}`);
                    setTimeout(function () {
                        
                        _this.connection.connect(spacedesk.Model.Options.currentOptions);
                    }, 500);
                }
            };
            AppController.prototype.disconnect = function () {
                this.connection.disconnect();
            };
            AppController.prototype.reconnectToServer = function () {
                spacedesk.Model.Options.currentOptions.updateScreenResolution();
                if (this.connection.connectionState === spacedesk.Model.ConnectionState.Reconnecting) {
                    return;
                }
                this.shouldReconnectToServer = true;
                this.connection.disconnect();
            };
            AppController.prototype.onConnected = function () {
                console.log("Connected to " + spacedesk.Model.Options.currentOptions.server);
            };
            AppController.prototype.onDisconnected = function () {
                console.log("Disconnected");
                if (this.shouldReconnectToServer) {
                    console.log("Trying to reconnect");
                    this.connectUsingInput();
                    this.shouldReconnectToServer = false;
                }
            };
            return AppController;
        }());
        Controller.AppController = AppController;
    })(Controller = spacedesk.Controller || (spacedesk.Controller = {}));
})(spacedesk || (spacedesk = {}));
var Controller = spacedesk.Controller;
var app = new Controller.AppController();
app.init();
